import nltk
from nltk import word_tokenize, pos_tag, ne_chunk
from nltk.corpus import stopwords
from nltk.chunk import tree2conlltags

nltk.download('punkt')
nltk.download('maxent_ne_chunker')
nltk.download('words')
nltk.download('stopwords')

# Sample resume text
resume_text = """
John Doe
Software Engineer

Skills: Python, Java, Machine Learning

Education:
- Bachelor of Science in Computer Science, XYZ University
- Master of Science in Artificial Intelligence, ABC University

Experience:
- Software Engineer, Company A
  - Developed and maintained web applications using Python and Django.
  - Collaborated with cross-functional teams to deliver high-quality software.
- Intern, Company B
  - Assisted in implementing machine learning algorithms in Java.

"""

def preprocess_text(text):
    tokens = word_tokenize(text)
    tokens = [token.lower() for token in tokens if token.isalpha() and token.lower() not in stopwords.words('english')]
    return ' '.join(tokens)

def extract_entities(text):
    sentences = nltk.sent_tokenize(text)
    entities = []

    for sent in sentences:
        words = nltk.word_tokenize(sent)
        tagged = pos_tag(words)
        tree = ne_chunk(tagged)
        iob_tags = tree2conlltags(tree)
       
        for token, pos, ner in iob_tags:
            if ner != 'O':
                entities.append((token, ner))

    return entities

def parse_resume(resume_text):
    preprocessed_text = preprocess_text(resume_text)
    entities = extract_entities(preprocessed_text)

    parsed_info = {
        'name': None,
        'skills': [],
        'education': [],
        'experience': []
    }

    for entity, label in entities:
        if label == 'PERSON' and not parsed_info['name']:
            parsed_info['name'] = entity
        elif label == 'SKILL':
            parsed_info['skills'].append(entity)
        elif label == 'EDUCATION':
            parsed_info['education'].append(entity)
        elif label == 'EXPERIENCE':
            parsed_info['experience'].append(entity)

    return parsed_info

parsed_resume = parse_resume(resume_text)
print("Parsed Resume:")
print(parsed_resume)